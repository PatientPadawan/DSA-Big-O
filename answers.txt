1) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over". 
1a) O(1) constant

2) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask.
2a) 0(n) linear

3) What is the Big O of the following algorithm? Explain your answer
function isEven(value) {
  if (value % 2 == 0) {
    return true;
  }
  else
    return false;
  }
}
3a)  O(1) constant. The function is basic arithmetic and checks if a single value is even or not. 
No matter the size of the input it will take the same amount of time for the function to do the check and return. 

4) What is the Big O of the following algorithm? Explain your answer
function areYouHere(arr1, arr2) {
  for (let i = 0; i < arr1.length; i++) {
    const el1 = arr1[i];
    for (let j = 0; j < arr2.length; j++) {
      const el2 = arr2[j];
      if (el1 === el2) return true;
    }
  }
  return false;
}
4a) O(n^2) polynomial. The function has a nested loop.

5) What is the Big O of the following algorithm? Explain your answer
function doubleArrayValues(array) {
  for (let i = 0; i < array.length; i++) {
    array[i] *= 2;
  }
  return array;
}
5a) O(n) linear. The function loops through the length of the array doubling each element's value. Time to complete will increase proportional to the size of array. 

6) What is the Big O of the following algorithm? Explain your answer
function naiveSearch(array, item) {
  for (let i = 0; i < array.length; i++) {
    if (array[i] === item) {
      return i;
    }
  }
}
6a) O(n) linear. The function loops through array until finding a matching index. Time pt complete will increase proportional to the size of the array. 

7) What is the Big O of the following algorithm? Explain your answer
function createPairs(arr) {
  for (let i = 0; i < arr.length; i++) {
    for(let j = i + 1; j < arr.length; j++) {
      console.log(arr[i] + ", " +  arr[j] );
    }
  }
}
7a) O(n^2) polynomial. The function contains a nested loop.

8) What does the following algorithm do? What is its runtime complexity? Explain your answer
function compute(num) {
  let result = [];
  for (let i = 1; i <= num; i++) {

    if (i === 1) {
      result.push(0);
    }
    else if (i == 2) {
      result.push(1);
    }
    else {
      result.push(result[i - 2] + result[i - 3]);
    }
  }
  return result;
}
8a) The above function reproduces the fibonacci sequence. O(n) linear. Time will increase proportional to the size of number supplied. 

9) In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the input array is always sorted. What is the Big O of the following algorithm? Explain your answer
function efficientSearch(array, item) {
  let minIndex = 0;
  let maxIndex = array.length - 1;
  let currentIndex;
  let currentElement;

  while (minIndex <= maxIndex) {
    currentIndex = Math.floor((minIndex + maxIndex) / 2);
    currentElement = array[currentIndex];

    if (currentElement < item) {
      minIndex = currentIndex + 1;
    }
    else if (currentElement > item) {
      maxIndex = currentIndex - 1;
    }
    else {
      return currentIndex;
    }
  }
  return -1;
}
9a) O(log(n)) logarithmic time. The time to complete will increase as the provided array increases in time, however it will do so at a slower rate than the increase in size. The problem is "cut in half" during each iteration. 

10) What is the Big O of the following algorithm? Explain your answer
function findRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}
10a) O(1) constant time. No matter the size of the array a random one is chosen and returned. Time to complete is constant despite changes in size of the supplied array.

11) What does the following algorithm do? What is the Big O of the following algorithm? Explain your answer
function isWhat(n) {
  if (n < 2 || n % 1 != 0) {
    return false;
  }
  for (let i = 2; i < n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}
11a) The above function checks if the supplied number is a prime number. Return true if so and false if not. O(n) linear time. As the size of the number supplied increased the longer it will take to complete proportionalally. 

12)The Tower of Hanoi is a very famous mathematical puzzle (some call it game!). This is how it goes:

There are three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk at the top (making a conical shape). The other two rods are empty to begin with.
The goal of the puzzle is to move the entire stack of rods to another rod (can't be the original rod where it was stacked before) where it will be stacked in the ascending order as well. This should be done obeying the following rules: i) Only one disk may be moved at a time ii) Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod. iii) A larger disk may not placed on top of a smaller disk
Input:

Rod A	Rod B	Rod C
----		
---------		
-------------		
Output:

Rod A	Rod B	Rod C
----
---------
-------------
Derive an algorithm to solve the Tower of Hanoi puzzle.
Implement your algorithm using recursion. Your program should display each movement of the disk from one rod to another.
If you are given 5 disks, how do the rods look like after 7 recursive calls?
How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?
What is the runtime of your algorithm?

12a) Algorithm can be found in local file named Hanoi.js. 3 discs = 7 moves / 4 discs = 15 moves / 5 discs = 31 moves. O(2^n) exponential time complexity. 